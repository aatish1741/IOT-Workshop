#include <ESP8266WiFi.h>
#include <PubSubClient.h>

// Replace with your WiFi credentials
const char* ssid = "SSID";
const char* password = "PASSWORD";

// MQTT Broker settings
const char* mqtt_server = "mqtt.thingspeak.com";  // ThingSpeak MQTT broker
const int mqtt_port = 1883; // Standard MQTT port (1883 for non-SSL, 8883 for SSL)
const char* mqtt_user = "username";  // ThingSpeak username (same as channel name)
const char* mqtt_pass = "api-key";  // Write API key from ThingSpeak

WiFiClient espClient;
PubSubClient client(espClient);

// Setup the MQTT topic 
const char* topic = "channels/channel-id/publish/api-key";

void setup() {
  // Start serial communication
  Serial.begin(115200);

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");
  
  // Connect to MQTT
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);

  while (!client.connected()) {
    Serial.println("Connecting to MQTT...");
    if (client.connect("ESP8266Client", mqtt_user, mqtt_pass)) {
      Serial.println("Connected to MQTT");
    } else {
      Serial.print("Failed to connect, rc=");
      Serial.print(client.state());
      delay(5000);
    }
  }
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  // Send data to the MQTT broker
  String message = "field1=123";  // Example data to send
  client.publish(topic, message.c_str());
  delay(10000);  // Send data every 10 seconds
}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    if (client.connect("ESP8266Client", mqtt_user, mqtt_pass)) {
      Serial.println("Connected to MQTT");
    } else {
      Serial.print("Failed, rc=");
      Serial.print(client.state());
      delay(5000);
    }
  }
}

void callback(char* topic, byte* payload, unsigned int length) {
  // This will be called when a message is received
}

